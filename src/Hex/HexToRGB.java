package Hex;
import java.util.HashMap;

public class HexToRGB {
    /*
     * Solution:
     * Given '#FF9933' (ignoring # sign),
     * decomposing it to RBG substring yields: [FF],[99],[33] respectively.
     * for each set, the integer value is generated by: Î£ element(i) * 16^(k), (where k == 0 or k == 1)
     */
    public class RGB{
        private int red;
        private int green;
        private int blue;
        public RGB(int r, int g, int b){
            setRed(r);
            setGreen(g);
            setBlue(b);
        }
        public void setRed(int r){ this.red = r; }
        public void setGreen(int g){ this.green = g; }
        public void setBlue(int b){ this.blue = b; }
        public String toString(){
            return  "Red: " + this.red + "\n" +
                    "Green: " + this.green + "\n" +
                    "Blue: " + this.blue;
        }
    }
    public static HashMap<Character, Integer> HEX_DICT = new HashMap<>(){{put('A',10);
                                                                        put('B',11);
                                                                        put('C',12);
                                                                        put('D',13);
                                                                        put('E',14);
                                                                        put('F',15);}};

    public static int base16ToBase10(String hexCode) throws IllegalArgumentException{
        if (hexCode.length() != 2){
            throw new IllegalArgumentException("HexCode must precisely be 2 characters in length!");}
        double val = 0.0;
        for(int i = 1, k= 0; i >=0; i--, k++){
            char hex = hexCode.charAt(i);
            if(!HEX_DICT.containsKey(hex)){
                val += Character.getNumericValue(hex) * Math.pow(HextoDec.RADIX_16, k);
            }
            else{
                val += HEX_DICT.get(hex) * Math.pow(HextoDec.RADIX_16, k);
            }
        }
        return (int) val;
    }
    public RGB hexStringToRGB(String hex){
        hex = hex.toUpperCase();
        RGB rgb = new RGB(base16ToBase10(hex.substring(1,3)),
                          base16ToBase10(hex.substring(3,5)),
                          base16ToBase10(hex.substring(5,7)));
        return rgb;
    }
    public static void main(String[] args) {
        HexToRGB hexToRGB = new HexToRGB();
        System.out.println(hexToRGB.hexStringToRGB("#FF9933") + "\n");
        System.out.println(hexToRGB.hexStringToRGB("#beaded") + "\n");
        System.out.println(hexToRGB.hexStringToRGB("#Fa3456") + "\n");
        System.out.println(hexToRGB.hexStringToRGB("#111111") + "\n");
        System.out.println(hexToRGB.hexStringToRGB("#000000"));
    }
}
